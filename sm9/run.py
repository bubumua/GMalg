from gmssl.gmssl import sm9

if __name__ == '__main__':
    idA = 'Alice'
    idB = 'Bob'
    message = 'abc'
    print(f"idA: {idA}")
    print(f"idB: {idB}")
    print(f"message: {message}")
    print("-----------------test sign and verify---------------")
    master_public, master_secret = sm9.setup('sign')
    print(f"master_public: {master_public}")
    print(f"master_secret: {master_secret}")
    Da = sm9.private_key_extract('sign', master_public, master_secret, idA)
    signature = sm9.sign(master_public, Da, message)
    assert (sm9.verify(master_public, idA, message, signature))
    print("success")
    print("-----------------test key agreement---------------")
    master_public, master_secret = sm9.setup('keyagreement')
    Da = sm9.private_key_extract('keyagreement', master_public, master_secret, idA)
    Db = sm9.private_key_extract('keyagreement', master_public, master_secret, idB)
    xa, Ra = sm9.generate_ephemeral(master_public, idB)
    xb, Rb = sm9.generate_ephemeral(master_public, idA)
    ska = sm9.generate_session_key(idA, idB, Ra, Rb, Da, xa, master_public, 'A', 128)
    skb = sm9.generate_session_key(idA, idB, Ra, Rb, Db, xb, master_public, 'B', 128)
    print(f"ska: {ska}")
    print(f"skb: {skb}")
    assert (ska == skb)
    print("success")
    print("-----------------test encrypt and decrypt---------------")
    master_public, master_secret = sm9.setup('encrypt')
    Da = sm9.private_key_extract('encrypt', master_public, master_secret, idA)
    print(f"message: {message}")
    ct = sm9.kem_dem_enc(master_public, idA, message, 32)
    print(f"ciphertext: {ct}")
    pt = sm9.kem_dem_dec(master_public, idA, Da, ct, 32)
    print(f"plaintext: {pt}")
    assert (message == pt)
    print("success")
